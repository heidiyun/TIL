Integer(정적 팩토리 메소드) -> 객체를 생성하는 팩토리 메소드
가독성이 높다 이름을 통해서 무엇인지 정확하게 전달
코드의 수정이 없이 정책을 변경할 수 있다. (객체 생성을 억제하는 방향)
공유할 수 있다. -> 메모리 효율이 좋아진다.(new로도 사용할 수 있다.)

새롭게 생성할지, 공유할지 알아서 결정해준다.


Integer가 불변객체라서 공유할 수 있다.
cow(copy on write) -> 수정하는 순간에 복제를 뜬다. 
바꾸는 A가 복제된 객체를 가르키게 된다.

new instance() -> default 생성자가 무조건 있어야 한다.
Framework는 흐름이 있어서 룰에 맞춰서 써야 한다.
사용자가 만든 클래스를 프레임워크에서 객체를 생성할때 사용한다.
Framework에서 객체를 생성할 때 어떤 타입의 객체를 생성하는지 모르니까..? 동적생성?

Stringbuilder
for (int i = 0; i < 10000; ++i)
 s+=i;

StringButilder sb = new StringBuilder(s);
sb.add(i)l
s = sb.toString();

StringBuilder sb = new StringBuilder("");
for (int i = 0; i < 10000; ++i)
sb.add(i);

String s = sb.toString();

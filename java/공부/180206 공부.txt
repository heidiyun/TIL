a.c (source file)
	c언어의 컴파일 단위 : 파일
	 => 다른 파일에 존재하는 함수의 존재를 알 수 없다.
	 => 다른 파일에 구현된 함수가 존재한다는 사실을 컴파일러에게 알려주어야 한다.
preprocessor (전처리기)
	: #으로 시작하는 모든 명령은 전처리기가 처리한다.
	  컴파일하기 전에 필요한 정보를 끌어온다.
compile 
	: source file -> object file
	: 1. 반환 타입
	  2. 인자의 개수와 타입

linking
	: 라이브러리(오브젝트 파일의 집합)에서 필요한 것들을 끌어온다. 
	  다른 파일에서 필요한 것들을 끌어온다.
		-> 함수의 구현이 들어있는 곳.
 => a.out (실행파일)

코드의 품질판단
 // 유지보수가 용이해야 한다.
 //  -> 전체적인 개발 비용을 절감할 수 있다.

선언 : 컴파일러에게 존재를 알려주는 역할
정의 : 메모리에 할당된다.

다른 파일에서 접근가능한 전역 변수 : extern
다른 파일에서 접근 불가능한 전역 변수 : static


180123--------------------------------------------

주석 /* 안에 //넣을 수 없다.

#if 0 #end if

printf는 newline을 만나기 전까지 출력하지 않는다.

모든 포인터의 크기는 8바이트다.

포인터와 배열의 연산이 호환되는 이유
	=> 배열의 연산은 포인터의 연산으로 변환됩니다.

// 포인터 + 상수 : 주소값 + 포인터 대상체 타입 크기 * 상수
// 포인터 - 상수 : 주소값 - 포인터 대상체 타입 크기 * 상수
// 포인터 - 포인터 : 주소값 차 / 대상체 타입 크기

arr[3] = *(arr + 3) = *(3 + arr) = 3[arr]

180129 ------------------------------------------

char arr[] -> 문자열로 작성할 때, 널문자를 넣어줘야 한다.
char *arr -> 널문자가 자동으로 맨 뒤에 붙는다.
strlen은 널문자를 뺀 문자열 길이를 계산한다.

180130 -------------------------------------------

매크로 함수
  -> 이름이 반드시 대문자로 되어야 한다.

함수의 단점	
	: 코드를 그냥 실행하는 것이 아니라, 점프를 수행하므로 오버헤드가 있다.
	: 함수의 호출이 오버헤드로 작용할 경우, 최적화 방법 (매크로 함수)
	    => 매크로 함수는 함수를 호출하는 것이 아니라 텍스트를 치환하는
		것이므로 호출에 따른 오버헤드가 존재하지 않는다.
	    => 함수의 타입이 다르고 알고리즘이 동일한 경우, 적은 코드로 처리할 수 있다.!

	    => 단점 ! : 문제를 찾기 힘들다. 
			-> 컴파일이 이루어지기 전에 치환되기 때문이다.!


<매크로 함수>
장점
	: 호출이 아닌 치환이므로 성능이 좋다.(오버헤드 해소)
	: 함수의 알고리즘은 동일한데 반환 타입 및 매개변수 타입이 다를 경우 일반화 가능
	: 코드를 생성할 수 있다.
	: 짧은 코드를 매크로 함수로 만들 경우, 바이너리 사이즈가 감소 할 수 있다.

단점
	: 컴파일 타임에 동작하는 것이 아니라, 컴파일 전에 치환되므로 오류가 발생할 경우 디버깅이 어렵다.
	: 긴구문을 매크로 함수로 만들경우 바이너리 사이즈가 증가한다.
	: ++X와 같은 연산에서 오류가 발생할 수 있다.


<인라인 함수>

	=> 매크로 함수는 코드를 붙여 넣지만, 인라인 함수는 기계어를 붙여 넣는다.
	=> 인라인 함수는 반드시 컴파일시에 구현이 존재해야 하므로 다른 파일에 둘 수 없다. static inlin

180201 -------------------------------------------------------------------------------

구조체 : 다른 타입의 변수가 여러 개 필요한 경우
 => 하나의 개념으로 묶어서 관리하고 싶을 경우
    캡슐화!


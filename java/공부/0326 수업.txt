기존 클래스의 인터페이스(행동의 방법)를 변경해서 새로운 클래스처럼 보이게 하는 설계 방법
 => 어댑터

상속을 통한 재활용은 좋은 방법은 아니다. 
 -> 현대적 객체 지향 설계에서는 상속을 재사용을 위해 사용하지 않는다.
 -> 상속의 목적 : 다형성.

부모 클래스가 변경되면 자식 클래스가 제대로 동작하지 않을 수가 있다.

동기화의 정책을 라이브러리가 아닌 사용자가 결정하도록 한다.

java stack -> 멀티스레드 안전하게 설계, vector를 상속하고 있다.

interable : 클래스가 iterator를 제공해주고 있다.

인터페이스는 변경에 취약하다.
다이아몬드 상속 ...: 여러개의 인터페이스를 구현할 때, 동일한 함수가 있다면 어떤 인터페이스의
함수를 구현할지 모호하다.
